services:
  postgres:
    image: postgres:15
    container_name: airflow_postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - airflow_network

  airflow-webserver:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    image: custom_airflow:2.8.1-python3.11
    container_name: airflow_webserver
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./etl_pipeline:/opt/airflow/etl_pipeline
      - ./include:/opt/airflow/include        # ✅ NEW: ensure DAG can see the input CSV file
    ports:
      - "8080:8080"
    command: webserver
    networks:
      - airflow_network

  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    image: custom_airflow:2.8.1-python3.11
    container_name: airflow_scheduler
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./etl_pipeline:/opt/airflow/etl_pipeline
      - ./include:/opt/airflow/include        # ✅ NEW: ensure scheduler also has access
    command: scheduler
    networks:
      - airflow_network

volumes:
  postgres_db:

networks:
  airflow_network:
    driver: bridge
